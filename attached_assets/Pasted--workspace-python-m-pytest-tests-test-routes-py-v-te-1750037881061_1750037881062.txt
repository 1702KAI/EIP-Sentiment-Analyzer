~/workspace$ python -m pytest tests/test_routes.py -v
=========================================== test session starts ===========================================
platform linux -- Python 3.11.10, pytest-8.4.0, pluggy-1.6.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
configfile: pytest.ini
plugins: anyio-4.9.0, Flask-Dance-7.1.0, cov-6.2.1, flask-1.3.0
collected 18 items                                                                                        

tests/test_routes.py::TestPublicRoutes::test_homepage_loads PASSED                                  [  5%]
tests/test_routes.py::TestPublicRoutes::test_smart_contract_page_loads PASSED                       [ 11%]
tests/test_routes.py::TestPublicRoutes::test_dashboard_loads PASSED                                 [ 16%]
tests/test_routes.py::TestPublicRoutes::test_login_page_loads PASSED                                [ 22%]
tests/test_routes.py::TestFileUpload::test_upload_without_login_redirects PASSED                    [ 27%]
tests/test_routes.py::TestFileUpload::test_upload_with_valid_csv FAILED                             [ 33%]
tests/test_routes.py::TestFileUpload::test_upload_without_file FAILED                               [ 38%]
tests/test_routes.py::TestFileUpload::test_upload_invalid_file_type FAILED                          [ 44%]
tests/test_routes.py::TestAPIEndpoints::test_generate_contract_api FAILED                           [ 50%]
tests/test_routes.py::TestAPIEndpoints::test_analyze_security_api PASSED                            [ 55%]
tests/test_routes.py::TestAPIEndpoints::test_job_status_api FAILED                                  [ 61%]
tests/test_routes.py::TestAPIEndpoints::test_job_status_invalid_id PASSED                           [ 66%]
tests/test_routes.py::TestDashboardData::test_dashboard_with_data FAILED                            [ 72%]
tests/test_routes.py::TestDashboardData::test_export_dashboard_data FAILED                          [ 77%]
tests/test_routes.py::TestErrorHandling::test_404_handling PASSED                                   [ 83%]
tests/test_routes.py::TestErrorHandling::test_invalid_job_id_download FAILED                        [ 88%]
tests/test_routes.py::TestErrorHandling::test_api_without_json_data FAILED                          [ 94%]
tests/test_routes.py::TestErrorHandling::test_api_with_invalid_json FAILED                          [100%]

================================================ FAILURES =================================================
________________________________ TestFileUpload.test_upload_with_valid_csv ________________________________

self = <test_routes.TestFileUpload object at 0x7ff6cf9fcd10>, client = <FlaskClient <Flask 'app'>>
test_app = <Flask 'app'>, sample_csv_file = <_io.BytesIO object at 0x7ff6cf515990>

    def test_upload_with_valid_csv(self, client, test_app, sample_csv_file):
        """Test successful CSV upload with admin user"""
        with test_app.app_context():
            from app import db
            from models import User
    
            # Create admin user within test context
            admin = User()
            admin.id = 'test-admin-csv'
            admin.email = 'admin@csv.test'
            admin.is_admin = True
            db.session.add(admin)
            db.session.commit()
    
            with client.session_transaction() as sess:
                sess['_user_id'] = admin.id
                sess['_fresh'] = True
    
            data = {
                'file': (sample_csv_file, 'test.csv')
            }
    
>           response = client.post('/upload', data=data, follow_redirects=True)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_routes.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1167: in post
    return self.open(*args, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/flask/testing.py:235: in open
    response = super().open(
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app.py:75: in decorated_function
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @app.route('/upload', methods=['POST'])
    @require_admin
    def upload_file():
    
        if 'file' not in request.files:
            flash('No file selected', 'error')
            return redirect(request.url)
    
        file = request.files['file']
        if file.filename == '':
            flash('No file selected', 'error')
            return redirect(request.url)
    
        if file and file.filename and allowed_file(file.filename):
            filename = secure_filename(str(file.filename))
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            unique_filename = f"{timestamp}_{filename}"
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
            file.save(filepath)
    
            # Validate CSV structure
            try:
                df = pd.read_csv(filepath)
                required_columns = ['paragraphs', 'headings', 'unordered_lists', 'topic']
                missing_columns = [col for col in required_columns if col not in df.columns]
                if missing_columns:
                    flash(f'CSV missing required columns: {", ".join(missing_columns)}', 'error')
                    os.remove(filepath)
                    return redirect(request.url)
            except Exception as e:
                flash(f'Error reading CSV file: {str(e)}', 'error')
                os.remove(filepath)
                return redirect(request.url)
    
            # Create job in database
            job_id = str(uuid.uuid4())
            output_dir = os.path.join(app.config['OUTPUT_FOLDER'], job_id)
            os.makedirs(output_dir, exist_ok=True)
    
>           job = AnalysisJob()
                  ^^^^^^^^^^^
E           NameError: name 'AnalysisJob' is not defined

app.py:332: NameError
_________________________________ TestFileUpload.test_upload_without_file _________________________________

self = <test_routes.TestFileUpload object at 0x7ff6cf9fd450>, client = <FlaskClient <Flask 'app'>>
admin_user = <User test-admin-123>

    def test_upload_without_file(self, client, admin_user):
        """Test upload without selecting a file"""
        with client.session_transaction() as sess:
>           sess['_user_id'] = admin_user.id
                               ^^^^^^^^^^^^^

tests/test_routes.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7ff6cffd4dd0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7ff6cf1a7830>
attribute_names = {'created_at', 'email', 'first_name', 'id', 'is_admin', 'last_name', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7ff6ced2f190> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
______________________________ TestFileUpload.test_upload_invalid_file_type _______________________________

self = <test_routes.TestFileUpload object at 0x7ff6cf9fdbd0>, client = <FlaskClient <Flask 'app'>>
admin_user = <User test-admin-123>

    def test_upload_invalid_file_type(self, client, admin_user):
        """Test upload with invalid file type"""
        with client.session_transaction() as sess:
>           sess['_user_id'] = admin_user.id
                               ^^^^^^^^^^^^^

tests/test_routes.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7ff6cffd4dd0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7ff6cf140710>
attribute_names = {'created_at', 'email', 'first_name', 'id', 'is_admin', 'last_name', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7ff6ce1a5490> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
_______________________________ TestAPIEndpoints.test_generate_contract_api _______________________________

self = <test_routes.TestAPIEndpoints object at 0x7ff6cf9fe450>
mock_generator = <MagicMock name='EIPCodeGenerator' id='140698017466768'>
client = <FlaskClient <Flask 'app'>>

    @patch('app.EIPCodeGenerator')
    def test_generate_contract_api(self, mock_generator, client):
        """Test smart contract generation API"""
        mock_instance = MagicMock()
        mock_instance.generate_eip_implementation.return_value = {
            'success': True,
            'contract_code': 'contract TestContract {}'
        }
        mock_generator.return_value = mock_instance
    
        data = {
            'eip_number': '20',
            'contract_type': 'ERC20',
            'contract_name': 'TestToken'
        }
    
        response = client.post('/api/generate-contract',
                             data=json.dumps(data),
                             content_type='application/json')
    
        assert response.status_code == 200
        response_data = json.loads(response.data)
>       assert response_data['success'] is True
E       assert False is True

tests/test_routes.py:127: AssertionError
__________________________________ TestAPIEndpoints.test_job_status_api ___________________________________

self = <test_routes.TestAPIEndpoints object at 0x7ff6cf9ff250>, client = <FlaskClient <Flask 'app'>>
analysis_job = <AnalysisJob test-job-789>

    def test_job_status_api(self, client, analysis_job):
        """Test job status API endpoint"""
>       response = client.get(f'/api/job-status/{analysis_job.id}')
                                                 ^^^^^^^^^^^^^^^

tests/test_routes.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7ff6cfff5450; AnalysisJob>
state = <sqlalchemy.orm.state.InstanceState object at 0x7ff6cf546090>
attribute_names = {'completed_at', 'created_at', 'error_message', 'filename', 'id', 'original_filename', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <AnalysisJob at 0x7ff6ce9836d0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
_______________________________ TestDashboardData.test_dashboard_with_data ________________________________

self = <test_routes.TestDashboardData object at 0x7ff6cf504190>, client = <FlaskClient <Flask 'app'>>
eip_sentiment_data = [<EIPSentiment 1>, <EIPSentiment 2>, <EIPSentiment 3>]
analysis_job = <AnalysisJob test-job-789>

    def test_dashboard_with_data(self, client, eip_sentiment_data, analysis_job):
        """Test dashboard loads with sentiment data"""
>       response = client.get(f'/dashboard?job_id={analysis_job.id}')
                                                   ^^^^^^^^^^^^^^^

tests/test_routes.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7ff6cfff5450; AnalysisJob>
state = <sqlalchemy.orm.state.InstanceState object at 0x7ff6cf1c3530>
attribute_names = {'completed_at', 'created_at', 'error_message', 'filename', 'id', 'original_filename', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <AnalysisJob at 0x7ff6cf512210> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
______________________________ TestDashboardData.test_export_dashboard_data _______________________________

self = <test_routes.TestDashboardData object at 0x7ff6cf9fd8d0>, client = <FlaskClient <Flask 'app'>>
admin_user = <User test-admin-123>
eip_sentiment_data = [<EIPSentiment 1>, <EIPSentiment 2>, <EIPSentiment 3>]
analysis_job = <AnalysisJob test-job-789>

    def test_export_dashboard_data(self, client, admin_user, eip_sentiment_data, analysis_job):
        """Test dashboard data export"""
        with client.session_transaction() as sess:
>           sess['_user_id'] = admin_user.id
                               ^^^^^^^^^^^^^

tests/test_routes.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7ff6cffd4dd0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7ff6cf9da3f0>
attribute_names = {'created_at', 'email', 'first_name', 'id', 'is_admin', 'last_name', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7ff6cf14dc50> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
_____________________________ TestErrorHandling.test_invalid_job_id_download ______________________________

self = <test_routes.TestErrorHandling object at 0x7ff6cf504990>, client = <FlaskClient <Flask 'app'>>
admin_user = <User test-admin-123>

    def test_invalid_job_id_download(self, client, admin_user):
        """Test download with invalid job ID"""
        with client.session_transaction() as sess:
>           sess['_user_id'] = admin_user.id
                               ^^^^^^^^^^^^^

tests/test_routes.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7ff6cffd4dd0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7ff6cf1c3290>
attribute_names = {'created_at', 'email', 'first_name', 'id', 'is_admin', 'last_name', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7ff6cf572a50> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
______________________________ TestErrorHandling.test_api_without_json_data _______________________________

self = <test_routes.TestErrorHandling object at 0x7ff6cf504d90>, client = <FlaskClient <Flask 'app'>>

    def test_api_without_json_data(self, client):
        """Test API endpoints without JSON data"""
        response = client.post('/api/generate-contract')
>       assert response.status_code == 400 or response.status_code == 500
E       assert (200 == 400 or 200 == 500)
E        +  where 200 = <WrapperTestResponse streamed [200 OK]>.status_code
E        +  and   200 = <WrapperTestResponse streamed [200 OK]>.status_code

tests/test_routes.py:206: AssertionError
------------------------------------------ Captured stderr call -------------------------------------------
ERROR:root:Contract generation error: 415 Unsupported Media Type: Did not attempt to load JSON data because the request Content-Type was not 'application/json'.
-------------------------------------------- Captured log call --------------------------------------------
ERROR    root:app.py:600 Contract generation error: 415 Unsupported Media Type: Did not attempt to load JSON data because the request Content-Type was not 'application/json'.
______________________________ TestErrorHandling.test_api_with_invalid_json _______________________________

self = <test_routes.TestErrorHandling object at 0x7ff6cf5051d0>, client = <FlaskClient <Flask 'app'>>

    def test_api_with_invalid_json(self, client):
        """Test API endpoints with invalid JSON"""
        response = client.post('/api/generate-contract',
                             data='invalid json',
                             content_type='application/json')
>       assert response.status_code == 400 or response.status_code == 500
E       assert (200 == 400 or 200 == 500)
E        +  where 200 = <WrapperTestResponse streamed [200 OK]>.status_code
E        +  and   200 = <WrapperTestResponse streamed [200 OK]>.status_code

tests/test_routes.py:213: AssertionError
------------------------------------------ Captured stderr call -------------------------------------------
ERROR:root:Contract generation error: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.
-------------------------------------------- Captured log call --------------------------------------------
ERROR    root:app.py:600 Contract generation error: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.
============================================ warnings summary =============================================
tests/test_routes.py::TestFileUpload::test_upload_with_valid_csv
  /home/runner/workspace/app.py:62: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    return User.query.get(user_id)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
========================================= short test summary info =========================================
FAILED tests/test_routes.py::TestFileUpload::test_upload_with_valid_csv - NameError: name 'AnalysisJob' is not defined