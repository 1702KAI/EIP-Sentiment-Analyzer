========================================================== 10 passed in 0.49s ===========================================================
~/workspace$ python -m pytest tests/test_smart_contract_generator.py -v
========================================================== test session starts ==========================================================
platform linux -- Python 3.11.10, pytest-8.4.0, pluggy-1.6.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
configfile: pytest.ini
plugins: anyio-4.9.0, Flask-Dance-7.1.0, cov-6.2.1, flask-1.3.0
collected 12 items                                                                                                                      

tests/test_smart_contract_generator.py::TestEIPCodeGenerator::test_generator_initialization PASSED                                [  8%]
tests/test_smart_contract_generator.py::TestEIPCodeGenerator::test_generate_eip_implementation FAILED                             [ 16%]
tests/test_smart_contract_generator.py::TestEIPCodeGenerator::test_analyze_contract_security PASSED                               [ 25%]
tests/test_smart_contract_generator.py::TestEIPCodeGenerator::test_generate_test_suite PASSED                                     [ 33%]
tests/test_smart_contract_generator.py::TestEIPCodeGenerator::test_analyze_code_and_recommend_eips FAILED                         [ 41%]
tests/test_smart_contract_generator.py::TestEIPCodeGenerator::test_format_eip_list PASSED                                         [ 50%]
tests/test_smart_contract_generator.py::TestSmartContractGeneratorErrorHandling::test_openai_api_error_handling PASSED            [ 58%]
tests/test_smart_contract_generator.py::TestSmartContractGeneratorErrorHandling::test_invalid_json_response_handling PASSED       [ 66%]
tests/test_smart_contract_generator.py::TestSmartContractGeneratorErrorHandling::test_empty_contract_code FAILED                  [ 75%]
tests/test_smart_contract_generator.py::TestSmartContractGeneratorErrorHandling::test_missing_eip_data 






PASSED                     [ 83%]
tests/test_smart_contract_generator.py::TestSmartContractGeneratorIntegration::test_full_workflow_generation_to_analysis FAILED   [ 91%]
tests/test_smart_contract_generator.py::TestSmartContractGeneratorIntegration::test_eip_status_filtering_recommendations PASSED   [100%]

=============================================================== FAILURES ================================================================
_________________________________________ TestEIPCodeGenerator.test_generate_eip_implementation _________________________________________

self = <test_smart_contract_generator.TestEIPCodeGenerator object at 0x7f08be912a90>
mock_openai = <MagicMock name='OpenAI' id='139675521059472'>

    @patch('smart_contract_generator.OpenAI')
    def test_generate_eip_implementation(self, mock_openai):
        """Test EIP implementation generation"""
        # Mock OpenAI response
        mock_client = MagicMock()
        mock_response = MagicMock()
        mock_response.choices[0].message.content = """
        ```solidity
        pragma solidity ^0.8.0;
    
        contract TestERC20 {
            string public name = "Test Token";
            string public symbol = "TEST";
            uint8 public decimals = 18;
        }
        ```
        """
        mock_client.chat.completions.create.return_value = mock_response
        mock_openai.return_value = mock_client
    
        generator = EIPCodeGenerator()
    
        eip_data = {
            'eip': '20',
            'title': 'EIP-20: Token Standard',
            'category': 'ERC',
            'status': 'Final'
        }
    
        result = generator.generate_eip_implementation(eip_data, 'ERC20')
    
        assert result['success'] is True
>       assert 'contract_code' in result
E       assert 'contract_code' in {'contract_type': 'ERC20', 'eip_metadata': {'category': 'ERC', 'eip': '20', 'status': 'Final', 'title': 'EIP-20: Token Standard'}, 'eip_number': '20', 'generated_code': '\n        ```solidity\n        pragma solidity ^0.8.0;\n        \n        contract TestERC20 {\n            string public name = "Test Token";\n            string public symbol = "TEST";\n            uint8 public decimals = 18;\n        }\n        ```\n        ', ...}

tests/test_smart_contract_generator.py:52: AssertionError
_______________________________________ TestEIPCodeGenerator.test_analyze_code_and_recommend_eips _______________________________________

self = <test_smart_contract_generator.TestEIPCodeGenerator object at 0x7f08be913fd0>
mock_openai = <MagicMock name='OpenAI' id='139675521752080'>

    @patch('smart_contract_generator.OpenAI')
    def test_analyze_code_and_recommend_eips(self, mock_openai):
        """Test code analysis and EIP recommendations"""
        mock_client = MagicMock()
        mock_response = MagicMock()
        mock_response.choices[0].message.content = """
        {
            "recommendations": [
                {
                    "eip": "20",
                    "relevance_score": 0.9,
                    "reasoning": "Contract implements token functionality",
                    "title": "EIP-20: Token Standard",
                    "status": "Final",
                    "category": "ERC"
                },
                {
                    "eip": "165",
                    "relevance_score": 0.7,
                    "reasoning": "Contract could benefit from interface detection",
                    "title": "EIP-165: Standard Interface Detection",
                    "status": "Final",
                    "category": "ERC"
                }
            ]
        }
        """
        mock_client.chat.completions.create.return_value = mock_response
        mock_openai.return_value = mock_client
    
        generator = EIPCodeGenerator()
        contract_code = """
        contract Token {
            mapping(address => uint256) public balances;
            function transfer(address to, uint256 amount) public returns (bool) {
                balances[msg.sender] -= amount;
                balances[to] += amount;
                return true;
            }
        }
        """
    
        eip_data_list = [
            MagicMock(eip='20', title='EIP-20: Token Standard', status='Final', category='ERC'),
            MagicMock(eip='165', title='EIP-165: Interface Detection', status='Final', category='ERC')
        ]
    
        result = generator.analyze_code_and_recommend_eips(
            contract_code, 'comprehensive', eip_data_list
        )
    
        assert result['success'] is True
>       assert 'recommendations' in result
E       assert 'recommendations' in {'analysis': '\n        {\n            "recommendations": [\n                {\n                    "eip": "20",\n                    "relevance_score": 0.9,\n                    "reasoning": "Contract implements token functionality",\n                    "title": "EIP-20: Token Standard",\n                    "status": "Final",\n                    "category": "ERC"\n                },\n                {\n                    "eip": "165",\n                    "relevance_score": 0.7,\n                    "reasoning": "Contract could benefit from interface detection",\n                    "title": "EIP-165: Standard Interface Detection",\n                    "status": "Final",\n                    "category": "ERC"\n                }\n            ]\n        }\n        ', 'eip_recommendations': [{'category': 'ERC', 'eip': '20', 'reasoning': 'Contract implements token functionality', 'relevance_score': 0.9, ...}, {'category': 'ERC', 'eip': '165', 'reasoning': 'Contract could benefit from interface detection', 'relevance_score': 0.7, ...}], 'success': True}

tests/test_smart_contract_generator.py:171: AssertionError
___________________________________ TestSmartContractGeneratorErrorHandling.test_empty_contract_code ____________________________________

self = <test_smart_contract_generator.TestSmartContractGeneratorErrorHandling object at 0x7f08be91ddd0>

    def test_empty_contract_code(self):
        """Test handling of empty contract code"""
        generator = EIPCodeGenerator()
    
        result = generator.analyze_contract_security("")
    
>       assert result['success'] is False
E       assert True is False

tests/test_smart_contract_generator.py:253: AssertionError
--------------------------------------------------------- Captured stderr call ----------------------------------------------------------
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e7590947-7fae-422d-8cf2-7427f9fe951b', 'json_data': {'messages': [{'role': 'user', 'content': '\nAnalyze this Solidity smart contract for security vulnerabilities, gas optimization opportunities, and best practices:\n\n```solidity\n\n```\n\nProvide a comprehensive analysis including:\n1. Security vulnerabilities (reentrancy, overflow, access control, etc.)\n2. Gas optimization opportunities\n3. Code quality and best practices\n4. EIP compliance verification\n5. Recommended improvements\n\nFormat the response as structured text with clear sections and severity levels.\n'}], 'model': 'gpt-4o', 'max_tokens': 2000, 'temperature': 0.2}}
DEBUG:openai._base_client:Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
DEBUG:httpcore.connection:connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f08bcdd9010>
DEBUG:httpcore.connection:start_tls.started ssl_context=<ssl.SSLContext object at 0x7f08bed61be0> server_hostname='api.openai.com' timeout=5.0
DEBUG:httpcore.connection:start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f08bcdd9250>
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 16 Jun 2025 02:26:23 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'personal-nvljia'), (b'openai-processing-ms', b'14026'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'14032'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29881'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'238ms'), (b'x-request-id', b'req_be110f83f8412ffb9e4be7f8c20734e7'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=RYj5BhKW_5wUXx4wvdXFbk65kPydlSCB1dq6m_sRugo-1750040783-1.0.1.1-BbNqFrJ44E_QqfxZ7gR91Az_2s7cdCWRaaZx0G.qOdTsdZe0bHLocwsS8_qZthhLoJ9OvkCyvDTwTV3Ccurajq__RzcTOPT83KsUNKJoAFA; path=/; expires=Mon, 16-Jun-25 02:56:23 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=NO943.OcSALr3NxoVpJDWIhIgsl5Mxsm7JPx8Yh_UB0-1750040783101-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9506dc545c9922f4-ORD'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 16 Jun 2025 02:26:23 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'personal-nvljia'), ('openai-processing-ms', '14026'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '14032'), ('x-ratelimit-limit-requests', '500'), ('x-ratelimit-limit-tokens', '30000'), ('x-ratelimit-remaining-requests', '499'), ('x-ratelimit-remaining-tokens', '29881'), ('x-ratelimit-reset-requests', '120ms'), ('x-ratelimit-reset-tokens', '238ms'), ('x-request-id', 'req_be110f83f8412ffb9e4be7f8c20734e7'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=RYj5BhKW_5wUXx4wvdXFbk65kPydlSCB1dq6m_sRugo-1750040783-1.0.1.1-BbNqFrJ44E_QqfxZ7gR91Az_2s7cdCWRaaZx0G.qOdTsdZe0bHLocwsS8_qZthhLoJ9OvkCyvDTwTV3Ccurajq__RzcTOPT83KsUNKJoAFA; path=/; expires=Mon, 16-Jun-25 02:56:23 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=NO943.OcSALr3NxoVpJDWIhIgsl5Mxsm7JPx8Yh_UB0-1750040783101-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9506dc545c9922f4-ORD'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
DEBUG:openai._base_client:request_id: req_be110f83f8412ffb9e4be7f8c20734e7
----------------------------------------------------------- Captured log call -----------------------------------------------------------
DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e7590947-7fae-422d-8cf2-7427f9fe951b', 'json_data': {'messages': [{'role': 'user', 'content': '\nAnalyze this Solidity smart contract for security vulnerabilities, gas optimization opportunities, and best practices:\n\n```solidity\n\n```\n\nProvide a comprehensive analysis including:\n1. Security vulnerabilities (reentrancy, overflow, access control, etc.)\n2. Gas optimization opportunities\n3. Code quality and best practices\n4. EIP compliance verification\n5. Recommended improvements\n\nFormat the response as structured text with clear sections and severity levels.\n'}], 'model': 'gpt-4o', 'max_tokens': 2000, 'temperature': 0.2}}
DEBUG    openai._base_client:_base_client.py:968 Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f08bcdd9010>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x7f08bed61be0> server_hostname='api.openai.com' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f08bcdd9250>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 16 Jun 2025 02:26:23 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'personal-nvljia'), (b'openai-processing-ms', b'14026'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'14032'), (b'x-ratelimit-limit-requests', b'500'), (b'x-ratelimit-limit-tokens', b'30000'), (b'x-ratelimit-remaining-requests', b'499'), (b'x-ratelimit-remaining-tokens', b'29881'), (b'x-ratelimit-reset-requests', b'120ms'), (b'x-ratelimit-reset-tokens', b'238ms'), (b'x-request-id', b'req_be110f83f8412ffb9e4be7f8c20734e7'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=RYj5BhKW_5wUXx4wvdXFbk65kPydlSCB1dq6m_sRugo-1750040783-1.0.1.1-BbNqFrJ44E_QqfxZ7gR91Az_2s7cdCWRaaZx0G.qOdTsdZe0bHLocwsS8_qZthhLoJ9OvkCyvDTwTV3Ccurajq__RzcTOPT83KsUNKJoAFA; path=/; expires=Mon, 16-Jun-25 02:56:23 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=NO943.OcSALr3NxoVpJDWIhIgsl5Mxsm7JPx8Yh_UB0-1750040783101-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9506dc545c9922f4-ORD'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1006 HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 16 Jun 2025 02:26:23 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'personal-nvljia'), ('openai-processing-ms', '14026'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '14032'), ('x-ratelimit-limit-requests', '500'), ('x-ratelimit-limit-tokens', '30000'), ('x-ratelimit-remaining-requests', '499'), ('x-ratelimit-remaining-tokens', '29881'), ('x-ratelimit-reset-requests', '120ms'), ('x-ratelimit-reset-tokens', '238ms'), ('x-request-id', 'req_be110f83f8412ffb9e4be7f8c20734e7'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=RYj5BhKW_5wUXx4wvdXFbk65kPydlSCB1dq6m_sRugo-1750040783-1.0.1.1-BbNqFrJ44E_QqfxZ7gR91Az_2s7cdCWRaaZx0G.qOdTsdZe0bHLocwsS8_qZthhLoJ9OvkCyvDTwTV3Ccurajq__RzcTOPT83KsUNKJoAFA; path=/; expires=Mon, 16-Jun-25 02:56:23 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=NO943.OcSALr3NxoVpJDWIhIgsl5Mxsm7JPx8Yh_UB0-1750040783101-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9506dc545c9922f4-ORD'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
DEBUG    openai._base_client:_base_client.py:1014 request_id: req_be110f83f8412ffb9e4be7f8c20734e7
____________________________ TestSmartContractGeneratorIntegration.test_full_workflow_generation_to_analysis ____________________________

self = <test_smart_contract_generator.TestSmartContractGeneratorIntegration object at 0x7f08be91ed10>
mock_openai = <MagicMock name='OpenAI' id='139675521752592'>

    @patch('smart_contract_generator.OpenAI')
    def test_full_workflow_generation_to_analysis(self, mock_openai):
        """Test complete workflow from generation to analysis"""
        mock_client = MagicMock()
    
        # Mock contract generation response
        generation_response = MagicMock()
        generation_response.choices[0].message.content = """
        ```solidity
        pragma solidity ^0.8.0;
    
        contract GeneratedToken {
            string public name = "Generated Token";
            mapping(address => uint256) public balances;
    
            function transfer(address to, uint256 amount) public returns (bool) {
                require(balances[msg.sender] >= amount, "Insufficient balance");
                balances[msg.sender] -= amount;
                balances[to] += amount;
                return true;
            }
        }
        ```
        """
    
        # Mock security analysis response
        analysis_response = MagicMock()
        analysis_response.choices[0].message.content = """
        # Security Analysis
    
        ## Issues Found
        - Missing access control
        - No events emitted
    
        ## Recommendations
        - Add owner access control
        - Emit Transfer events
        """
    
        # Configure mock to return different responses based on call
        mock_client.chat.completions.create.side_effect = [
            generation_response,
            analysis_response
        ]
        mock_openai.return_value = mock_client
    
        generator = EIPCodeGenerator()
    
        # Step 1: Generate contract
        eip_data = {
            'eip': '20',
            'title': 'EIP-20: Token Standard',
            'category': 'ERC'
        }
    
        generation_result = generator.generate_eip_implementation(eip_data, 'ERC20')
        assert generation_result['success'] is True
    
        # Step 2: Analyze generated contract
>       generated_code = generation_result['contract_code']
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       KeyError: 'contract_code'

tests/test_smart_contract_generator.py:328: KeyError
--------------------------------------------------------- Captured stderr call ----------------------------------------------------------
DEBUG:httpcore.connection:close.started
DEBUG:httpcore.connection:close.complete
----------------------------------------------------------- Captured log call -----------------------------------------------------------
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
======================================================== short test summary info ========================================================
FAILED tests/test_smart_contract_generator.py::TestEIPCodeGenerator::test_generate_eip_implementation - assert 'contract_code' in {'contract_type': 'ERC20', 'eip_metadata': {'category': 'ERC', 'eip': '20', 'status': 'Final', 'title': 'E...
FAILED tests/test_smart_contract_generator.py::TestEIPCodeGenerator::test_analyze_code_and_recommend_eips - assert 'recommendations' in {'analysis': '\n        {\n            "recommendations": [\n                {\n                    "eip...
FAILED tests/test_smart_contract_generator.py::TestSmartContractGeneratorErrorHandling::test_empty_contract_code - assert True is False
FAILED tests/test_smart_contract_generator.py::TestSmartContractGeneratorIntegration::test_full_workflow_generation_to_analysis - KeyError: 'contract_code'
===================================================== 4 failed, 8 passed in 32.86s ======================================================
DEBUG:httpcore.connection:close.started
DEBUG:httpcore.connection:close.complete