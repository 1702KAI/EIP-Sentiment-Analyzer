~/workspace$ python -m pytest tests/test_routes.py -v
=========================================== test session starts ===========================================
platform linux -- Python 3.11.10, pytest-8.4.0, pluggy-1.6.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
configfile: pytest.ini
plugins: anyio-4.9.0, Flask-Dance-7.1.0, cov-6.2.1, flask-1.3.0
collected 18 items                                                                                        

tests/test_routes.py::TestPublicRoutes::test_homepage_loads PASSED                                  [  5%]
tests/test_routes.py::TestPublicRoutes::test_smart_contract_page_loads FAILED                       [ 11%]
tests/test_routes.py::TestPublicRoutes::test_dashboard_loads PASSED                                 [ 16%]
tests/test_routes.py::TestPublicRoutes::test_login_page_loads PASSED                                [ 22%]
tests/test_routes.py::TestFileUpload::test_upload_without_login_redirects PASSED                    [ 27%]
tests/test_routes.py::TestFileUpload::test_upload_with_valid_csv FAILED                             [ 33%]
tests/test_routes.py::TestFileUpload::test_upload_without_file FAILED                               [ 38%]
tests/test_routes.py::TestFileUpload::test_upload_invalid_file_type FAILED                          [ 44%]
tests/test_routes.py::TestAPIEndpoints::test_generate_contract_api FAILED                           [ 50%]
tests/test_routes.py::TestAPIEndpoints::test_analyze_security_api PASSED                            [ 55%]
tests/test_routes.py::TestAPIEndpoints::test_job_status_api FAILED                                  [ 61%]
tests/test_routes.py::TestAPIEndpoints::test_job_status_invalid_id PASSED                           [ 66%]
tests/test_routes.py::TestDashboardData::test_dashboard_with_data ERROR                             [ 72%]
tests/test_routes.py::TestDashboardData::test_export_dashboard_data ERROR                           [ 77%]
tests/test_routes.py::TestErrorHandling::test_404_handling PASSED                                   [ 83%]
tests/test_routes.py::TestErrorHandling::test_invalid_job_id_download FAILED                        [ 88%]
tests/test_routes.py::TestErrorHandling::test_api_without_json_data FAILED                          [ 94%]
tests/test_routes.py::TestErrorHandling::test_api_with_invalid_json FAILED                          [100%]

================================================= ERRORS ==================================================
______________________ ERROR at setup of TestDashboardData.test_dashboard_with_data _______________________

test_app = <Flask 'app'>, analysis_job = <AnalysisJob test-job-789>

    @pytest.fixture
    def eip_sentiment_data(test_app, analysis_job):
        """Create sample EIP sentiment data for testing"""
        with test_app.app_context():
            sentiment_data = [
                EIPSentiment(
>                   job_id=analysis_job.id,
                           ^^^^^^^^^^^^^^^
                    eip='1',
                    unified_compound=0.5,
                    unified_pos=0.7,
                    unified_neg=0.1,
                    unified_neu=0.2,
                    total_comment_count=100,
                    category='Core',
                    status='Final',
                    title='EIP-1: EIP Purpose and Guidelines',
                    author='Martin Becze, Hudson Jameson'
                ),
                EIPSentiment(
                    job_id=analysis_job.id,
                    eip='20',
                    unified_compound=0.3,
                    unified_pos=0.6,
                    unified_neg=0.2,
                    unified_neu=0.2,
                    total_comment_count=250,
                    category='ERC',
                    status='Final',
                    title='EIP-20: Token Standard',
                    author='Fabian Vogelsteller, Vitalik Buterin'
                ),
                EIPSentiment(
                    job_id=analysis_job.id,
                    eip='721',
                    unified_compound=-0.1,
                    unified_pos=0.4,
                    unified_neg=0.4,
                    unified_neu=0.2,
                    total_comment_count=180,
                    category='ERC',
                    status='Final',
                    title='EIP-721: Non-Fungible Token Standard',
                    author='William Entriken'
                )
            ]

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7f90c63f8e50; AnalysisJob>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f90c557e930>
attribute_names = {'completed_at', 'created_at', 'error_message', 'filename', 'id', 'original_filename', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <AnalysisJob at 0x7f90c55200d0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
_____________________ ERROR at setup of TestDashboardData.test_export_dashboard_data ______________________

test_app = <Flask 'app'>, analysis_job = <AnalysisJob test-job-789>

    @pytest.fixture
    def eip_sentiment_data(test_app, analysis_job):
        """Create sample EIP sentiment data for testing"""
        with test_app.app_context():
            sentiment_data = [
                EIPSentiment(
>                   job_id=analysis_job.id,
                           ^^^^^^^^^^^^^^^
                    eip='1',
                    unified_compound=0.5,
                    unified_pos=0.7,
                    unified_neg=0.1,
                    unified_neu=0.2,
                    total_comment_count=100,
                    category='Core',
                    status='Final',
                    title='EIP-1: EIP Purpose and Guidelines',
                    author='Martin Becze, Hudson Jameson'
                ),
                EIPSentiment(
                    job_id=analysis_job.id,
                    eip='20',
                    unified_compound=0.3,
                    unified_pos=0.6,
                    unified_neg=0.2,
                    unified_neu=0.2,
                    total_comment_count=250,
                    category='ERC',
                    status='Final',
                    title='EIP-20: Token Standard',
                    author='Fabian Vogelsteller, Vitalik Buterin'
                ),
                EIPSentiment(
                    job_id=analysis_job.id,
                    eip='721',
                    unified_compound=-0.1,
                    unified_pos=0.4,
                    unified_neg=0.4,
                    unified_neu=0.2,
                    total_comment_count=180,
                    category='ERC',
                    status='Final',
                    title='EIP-721: Non-Fungible Token Standard',
                    author='William Entriken'
                )
            ]

conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7f90c63f8e50; AnalysisJob>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f90c55a9430>
attribute_names = {'completed_at', 'created_at', 'error_message', 'filename', 'id', 'original_filename', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <AnalysisJob at 0x7f90c59f0b50> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
================================================ FAILURES =================================================
_____________________________ TestPublicRoutes.test_smart_contract_page_loads _____________________________

self = <test_routes.TestPublicRoutes object at 0x7f90c5df7050>, client = <FlaskClient <Flask 'app'>>

    def test_smart_contract_page_loads(self, client):
        """Test smart contract generator page loads"""
        response = client.get('/smart-contract')
        assert response.status_code == 200
        assert b'Smart Contract Generator' in response.data
>       assert b'Generate Contract' in response.data
E       assert b'Generate Contract' in b'<!DOCTYPE html>\n<html lang="en" data-bs-theme="dark">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Smart Contract Generator - Sentiment Analyzer</title>\n    <link href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" rel="stylesheet">\n    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">\n    <link href="/static/css/style.css" rel="stylesheet">\n</head>\n<body>\n    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-chart-line me-2"></i>\n                EIP Sentiment Analyzer\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n           ...List.add(\'btn-success\');\n        \n        setTimeout(() => {\n            button.innerHTML = originalHtml;\n            button.classList.remove(\'btn-success\');\n            button.classList.add(\'btn-outline-secondary\');\n        }, 2000);\n    });\n}\n</script>\n\n    </main>\n\n    <footer class="bg-dark text-light py-4 mt-5">\n        <div class="container text-center">\n            <p class="mb-0">\n                <i class="fas fa-code me-2"></i>\n                EIP Sentiment Analyzer - Powered by VADER & EIPs Insight\n            </p>\n        </div>\n    </footer>\n\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>\n    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js"></script>\n    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-dark.min.css" rel="stylesheet">\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>\n    <script src="/static/js/main.js"></script>\n</body>\n</html>'
E        +  where b'<!DOCTYPE html>\n<html lang="en" data-bs-theme="dark">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Smart Contract Generator - Sentiment Analyzer</title>\n    <link href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" rel="stylesheet">\n    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">\n    <link href="/static/css/style.css" rel="stylesheet">\n</head>\n<body>\n    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-chart-line me-2"></i>\n                EIP Sentiment Analyzer\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n           ...List.add(\'btn-success\');\n        \n        setTimeout(() => {\n            button.innerHTML = originalHtml;\n            button.classList.remove(\'btn-success\');\n            button.classList.add(\'btn-outline-secondary\');\n        }, 2000);\n    });\n}\n</script>\n\n    </main>\n\n    <footer class="bg-dark text-light py-4 mt-5">\n        <div class="container text-center">\n            <p class="mb-0">\n                <i class="fas fa-code me-2"></i>\n                EIP Sentiment Analyzer - Powered by VADER & EIPs Insight\n            </p>\n        </div>\n    </footer>\n\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>\n    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js"></script>\n    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-dark.min.css" rel="stylesheet">\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>\n    <script src="/static/js/main.js"></script>\n</body>\n</html>' = <WrapperTestResponse 20006 bytes [200 OK]>.data

tests/test_routes.py:28: AssertionError
________________________________ TestFileUpload.test_upload_with_valid_csv ________________________________

self = <test_routes.TestFileUpload object at 0x7f90c5dfc910>, client = <FlaskClient <Flask 'app'>>
admin_user = <User test-admin-123>, sample_csv_file = <_io.BytesIO object at 0x7f90c5d07510>

    def test_upload_with_valid_csv(self, client, admin_user, sample_csv_file):
        """Test successful CSV upload with admin user"""
        with client.session_transaction() as sess:
>           sess['_user_id'] = admin_user.id
                               ^^^^^^^^^^^^^

tests/test_routes.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7f90c63d0990; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f90c5944410>
attribute_names = {'created_at', 'email', 'first_name', 'id', 'is_admin', 'last_name', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7f90c598fc90> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
_________________________________ TestFileUpload.test_upload_without_file _________________________________

self = <test_routes.TestFileUpload object at 0x7f90c5dfce50>, client = <FlaskClient <Flask 'app'>>
admin_user = <User test-admin-123>

    def test_upload_without_file(self, client, admin_user):
        """Test upload without selecting a file"""
        with client.session_transaction() as sess:
>           sess['_user_id'] = admin_user.id
                               ^^^^^^^^^^^^^

tests/test_routes.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7f90c63d0990; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f90c5d109b0>
attribute_names = {'created_at', 'email', 'first_name', 'id', 'is_admin', 'last_name', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7f90c59283d0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
______________________________ TestFileUpload.test_upload_invalid_file_type _______________________________

self = <test_routes.TestFileUpload object at 0x7f90c5dfd510>, client = <FlaskClient <Flask 'app'>>
admin_user = <User test-admin-123>

    def test_upload_invalid_file_type(self, client, admin_user):
        """Test upload with invalid file type"""
        with client.session_transaction() as sess:
>           sess['_user_id'] = admin_user.id
                               ^^^^^^^^^^^^^

tests/test_routes.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7f90c63d0990; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f90c5192510>
attribute_names = {'created_at', 'email', 'first_name', 'id', 'is_admin', 'last_name', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7f90c55089d0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
_______________________________ TestAPIEndpoints.test_generate_contract_api _______________________________

self = <test_routes.TestAPIEndpoints object at 0x7f90c5dfdd90>
mock_generator = <MagicMock name='EIPCodeGenerator' id='140259766803856'>
client = <FlaskClient <Flask 'app'>>

    @patch('app.EIPCodeGenerator')
    def test_generate_contract_api(self, mock_generator, client):
        """Test smart contract generation API"""
        mock_instance = MagicMock()
        mock_instance.generate_eip_implementation.return_value = {
            'success': True,
            'contract_code': 'contract TestContract {}'
        }
        mock_generator.return_value = mock_instance
    
        data = {
            'eip_number': '20',
            'contract_type': 'ERC20',
            'contract_name': 'TestToken'
        }
    
        response = client.post('/api/generate-contract',
                             data=json.dumps(data),
                             content_type='application/json')
    
        assert response.status_code == 200
        response_data = json.loads(response.data)
>       assert response_data['success'] is True
E       assert False is True

tests/test_routes.py:114: AssertionError
__________________________________ TestAPIEndpoints.test_job_status_api ___________________________________

self = <test_routes.TestAPIEndpoints object at 0x7f90c5dfea90>, client = <FlaskClient <Flask 'app'>>
analysis_job = <AnalysisJob test-job-789>

    def test_job_status_api(self, client, analysis_job):
        """Test job status API endpoint"""
>       response = client.get(f'/api/job-status/{analysis_job.id}')
                                                 ^^^^^^^^^^^^^^^

tests/test_routes.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7f90c63f8e50; AnalysisJob>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f90c5947170>
attribute_names = {'completed_at', 'created_at', 'error_message', 'filename', 'id', 'original_filename', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <AnalysisJob at 0x7f90c5525ed0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
_____________________________ TestErrorHandling.test_invalid_job_id_download ______________________________

self = <test_routes.TestErrorHandling object at 0x7f90c590d090>, client = <FlaskClient <Flask 'app'>>
admin_user = <User test-admin-123>

    def test_invalid_job_id_download(self, client, admin_user):
        """Test download with invalid job ID"""
        with client.session_transaction() as sess:
>           sess['_user_id'] = admin_user.id
                               ^^^^^^^^^^^^^

tests/test_routes.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:803: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

mapper = <Mapper at 0x7f90c63d0990; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f90c55a90d0>
attribute_names = {'created_at', 'email', 'first_name', 'id', 'is_admin', 'last_name', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7f90c5531210> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/loading.py:1603: DetachedInstanceError
______________________________ TestErrorHandling.test_api_without_json_data _______________________________

self = <test_routes.TestErrorHandling object at 0x7f90c590d810>, client = <FlaskClient <Flask 'app'>>

    def test_api_without_json_data(self, client):
        """Test API endpoints without JSON data"""
        response = client.post('/api/generate-contract')
>       assert response.status_code == 400 or response.status_code == 500
E       assert (200 == 400 or 200 == 500)
E        +  where 200 = <WrapperTestResponse streamed [200 OK]>.status_code
E        +  and   200 = <WrapperTestResponse streamed [200 OK]>.status_code

tests/test_routes.py:193: AssertionError
------------------------------------------ Captured stderr call -------------------------------------------
ERROR:root:Contract generation error: 415 Unsupported Media Type: Did not attempt to load JSON data because the request Content-Type was not 'application/json'.
-------------------------------------------- Captured log call --------------------------------------------
ERROR    root:app.py:665 Contract generation error: 415 Unsupported Media Type: Did not attempt to load JSON data because the request Content-Type was not 'application/json'.
______________________________ TestErrorHandling.test_api_with_invalid_json _______________________________

self = <test_routes.TestErrorHandling object at 0x7f90c590dfd0>, client = <FlaskClient <Flask 'app'>>

    def test_api_with_invalid_json(self, client):
        """Test API endpoints with invalid JSON"""
        response = client.post('/api/generate-contract',
                             data='invalid json',
                             content_type='application/json')
>       assert response.status_code == 400 or response.status_code == 500
E       assert (200 == 400 or 200 == 500)
E        +  where 200 = <WrapperTestResponse streamed [200 OK]>.status_code
E        +  and   200 = <WrapperTestResponse streamed [200 OK]>.status_code

tests/test_routes.py:200: AssertionError
------------------------------------------ Captured stderr call -------------------------------------------
ERROR:root:Contract generation error: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.
-------------------------------------------- Captured log call --------------------------------------------
ERROR    root:app.py:665 Contract generation error: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.
========================================= short test summary i